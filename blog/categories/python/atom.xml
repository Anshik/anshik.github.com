<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Ещё один блог]]></title>
  <link href="http://Anshik.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Anshik.github.com/"/>
  <updated>2013-05-27T15:23:14+04:00</updated>
  <id>http://Anshik.github.com/</id>
  <author>
    <name><![CDATA[Anshik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Установка PyQt4 в ubuntu 10.10, Python3.3]]></title>
    <link href="http://Anshik.github.com/blog/2013/03/22/ustanovka-pyqt4-v-ubuntu-10-dot-10/"/>
    <updated>2013-03-22T12:45:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2013/03/22/ustanovka-pyqt4-v-ubuntu-10-dot-10</id>
    <content type="html"><![CDATA[<h3>Введение</h3>

<p>Возник вопрос:</p>

<blockquote><p>Как установить в ubuntu 10.10 PyQt4 с python 3.3?</p></blockquote>

<p>Есть ответ:</p>

<!-- more -->


<h3>Установка Python 3.3</h3>

<p>Для установки потребуются пакеты</p>

<p>Для Ubuntu/ LinuxMint/Debian</p>

<p><code>bash
sudo apt-get install build-essential libncursesw5-dev libreadline5-dev libssl-dev libgdbm-dev libc6-dev libsqlite3-dev tk-dev
</code></p>

<p>Скачать релиз <a href="http://www.python.org/download/releases">Python 3.3</a><br/>
К примеру так:</p>

<blockquote><p>wget http://www.python.org/ftp/python/3.x/Python-3.x.tar.bz2</p></blockquote>

<p>Распаковать:</p>

<blockquote><p>tar -xjf Python-3.xtar.bz2 cd Python-3.x</p></blockquote>

<p>Сконфигурировать и собрать с префиксом (install dir) of /opt/python3, скомпилировать, и установить.<br/>
<code>bash последовательность конфигурирования, сборки и установки
./configure --prefix=/opt/python3
make
sudo make install
</code></p>

<p>Теперь Python установлен в папке /opt/python3.</p>

<p>В скрипты в начало добавлять</p>

<blockquote><p>#!/opt/python3/bin/python3</p></blockquote>

<h3>Установка SIP</h3>

<p>Скачать<br/>
SIP взять <a href="http://www.riverbankcomputing.com/software/sip/download">тут</a></p>

<p>Распаковать</p>

<blockquote><p>tar zxvf sip-4.14.4.tar.gz</p></blockquote>

<p>Зайти в распакованную папку, запустить конфигурирование, сборку, установку:
<code>bash
/opt/python3/bin/python3 configure.py
make
sudo make install
</code></p>

<h3>Установка самого PyQt4</h3>

<p>Алгоритм такой же: скачать, распаковать, сконфигурировать, <strong>есть нюанс</strong>, указать где лежит qmake-qt4:</p>

<p><code>bash
/opt/python3/bin/python3 configure.py --qmake /usr/bin/qmake-qt4  
make
sudo make install
</code></p>

<h3>Использование</h3>

<blockquote><p>/opt/python3/bin/pyvenv --system-site-packages a</p></blockquote>

<p>Это мы сказали: создай виртуальное окружение в папке "a", с использованием site-packages из системы.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Использование virtualenv python]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/05/ispolzovaniie-virtualenv-python/"/>
    <updated>2012-06-05T14:05:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/05/ispolzovaniie-virtualenv-python</id>
    <content type="html"><![CDATA[<h3>Введение</h3>

<p>Давно хотел разобраться, как настраивать и использовать <a href="http://pypi.python.org/pypi/virtualenv">virtualenv</a>.
Virtualenv это средство для создания изолированного окружения Python.</p>

<h4>Зачем оно нужно?</h4>

<p>По умолчанию easy_install ставит питоновские пакеты примерно в <code>/usr/local/lib/python2.6/dist-packages</code>
И там получается помойка из пакетов, в некоторых случаях мы работаем со старыми версиями пакетов.</p>

<!-- more -->


<blockquote><p>К примеру был написан сайт на Django, года два назад, и нужно использовать старую джангу, чтобы всё не переписывать. Тут два варианта :)<br/>
* Для слабаков:<br/>
Просто скопировать старую джангу в проект и не париться, и скопировать туда же в проект старые модули, и всё будет работать :)</p>

<ul>
<li>Для не_слабаков:<br/>
Настроить virtualenv под проект.</li>
</ul>


<p><strong>Virtualenv</strong> &mdash; позволяет для каждого проекта создать <strong>своё окружение</strong> <em>питонячьих</em> пакетов.</p></blockquote>

<h3>Установка</h3>

<p>sudo easy_install virtualenv</p>

<p>``` bash Как-то так оно установливается
$ sudo easy_install virtualenv
install_dir /usr/local/lib/python2.6/dist-packages/
Searching for virtualenv
Reading http://pypi.python.org/simple/virtualenv/
Reading http://www.virtualenv.org
Reading http://virtualenv.openplans.org
Best match: virtualenv 1.7.1.2
Downloading http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.7.1.2.tar.gz#md5=3be8a014c27340f48b56465f9109d9fa
Processing virtualenv-1.7.1.2.tar.gz
Running virtualenv-1.7.1.2/setup.py -q bdist_egg --dist-dir /tmp/easy_install-yLN55d/virtualenv-1.7.1.2/egg-dist-tmp-a8EZxb
warning: no previously-included files matching '<em>.</em>' found under directory 'docs/_templates'
Adding virtualenv 1.7.1.2 to easy-install.pth file
Installing virtualenv script to /usr/local/bin</p>

<p>Installed /usr/local/lib/python2.6/dist-packages/virtualenv-1.7.1.2-py2.6.egg
Processing dependencies for virtualenv
Finished processing dependencies for virtualenv
```</p>

<p><code>bash Проверяем
$ whereis virtualenv
virtualenv: /usr/local/bin/virtualenv
</code></p>

<h3>Создание окружения</h3>

<p><code>bash Создание окружения
home:~/temp$ virtualenv  -p /usr/bin/python2.6 --no-site-packages custom_python
Running virtualenv with interpreter /usr/bin/python2.6
The --no-site-packages flag is deprecated; it is now the default behavior.
New python executable in custom_python/bin/python2.6
Also creating executable in custom_python/bin/python
Installing setuptools............done.
Installing pip...............done.
home:~/temp$
</code>
Мы сказали, что хотим чтобы в папке <strong>custom_python</strong> использовался python интерпретатор, лежащий в <code>/usr/bin/python2.6</code>, и сказали, что не нужно использовать системных <strong>site-packages</strong>. А нам подсказали, что теперь писать --no-site-packages не нужно.</p>

<p><code>bash Смотрим, что получилось в папке custom_python.
home:~/temp/custom_python$ ls
bin  include  lib
home:~/temp/custom_python$
</code>
Для запуска приложения в нашей среде нужно сказать <code>./bin/python</code></p>

<h3>Пример установки Django</h3>

<p>Мне как раз захотелось запустить Django1.4, потом django-cms и т.д.<br/>
<code>home:~/temp/custom_python$ ./bin/easy_install django</code></p>

<p>Django скачивается, устанавливается и теперь лежит в:<br/>
<code>home:~/temp/custom_python/lib/python2.6/site-packages/Django-1.4-py2.6.egg</code></p>

<p>``` bash Создание и запуск проекта Django
home:~/temp/custom_python$ ./bin/django-admin.py startproject custom_django                                   <br/>
home:~/temp/custom_python$ cd custom_django/
home:~/temp/custom_python/custom_django$ ls
custom_django  manage.py
home:~/temp/custom_python/custom_django$ ../bin/python manage.py runserver
Validating models...</p>

<p>0 errors found
Django version 1.4, using settings 'custom_django.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
```
В общем-то, можно сказать всё. И не так страшно, как казалось.</p>

<h4>Запуск скрипта</h4>

<p>Создаём файл, обратите внимание на строчку <code>#!./bin/python</code> вначале файла, говорим, что будем при запуске использовать наш интерпретатор.<br/>
``` python К примеру такой tst.py</p>

<h1>!./bin/python</h1>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>from random import random
import struct
import sys</p>

<p>RAND_NUMS = 10
rand_list = []</p>

<p>for i in xrange(RAND_NUMS):</p>

<pre><code>a = random()
rand_list.append(struct.pack('B', int((a*100)%255)))
</code></pre>

<p>print rand_list
print sys.executable
```</p>

<p>Говорим <code>chmod +x tst.py</code>, запускаем <code>./tst.py</code><br/>
```bash Результат
home:~/temp/custom_python$ ./tst.py
['W', '\x1f', '\x06', '\x0f', '\x03', 'b', 'T', 'G', '\x17', '\x04']
/home/apalkov/temp/custom_python/bin/python</p>

<p>home:~/temp/custom_python$
```</p>

<h4>Облегчение работы с virtualenv при помощи virtualenvwrapper</h4>

<p><a href="http://www.doughellmann.com/docs/virtualenvwrapper/">virtualenvwrapper</a> написанный Doug Hellmann. Позволяет управлять виртуальными окружениями.</p>

<h5>Установка</h5>

<p><code>bash
sudo easy_install virtualenvwrapper
mkdir ~/.virtualenvs
</code>
~/.bashrc следующие содержание
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
<code>bash
source ~/.bashrc
</code>
Создаем новое окружение:</p>

<blockquote><p>mkvirtualenv blog</p></blockquote>

<p>Активируем:</p>

<blockquote><p>workon blog</p></blockquote>

<p>Деактивируем</p>

<blockquote><p>deactivate</p></blockquote>

<p>Удаляем</p>

<blockquote><p>rmvirtualenv blog</p></blockquote>

<p>В общем-то всё.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Создание схемы базы данных из имеющейся базы данных в Django | database schema from existing database in django]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/25/sozdaniie-skhiemy-bazy-dannykh-iz-imieiushchieisia-bazy-dannykh-v-django/"/>
    <updated>2012-05-25T08:49:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/25/sozdaniie-skhiemy-bazy-dannykh-iz-imieiushchieisia-bazy-dannykh-v-django</id>
    <content type="html"><![CDATA[<h3>Сделал базу данных в django. Как сделать из неё картинку, схему базы данных?</h3>

<p>Вот возник такой вопрос, и мне подсказали:<br/>
<a href="http://code.google.com/p/django-command-extensions/">django-command-extensions</a> устанавливаете, потом manage.py graph_models, только надо еще <a href="http://www.graphviz.org/">graphviz</a> иметь в системе установленным</p>

<!-- more -->


<h3>Более развёрнуто:</h3>

<ul>
<li>Если под убунтой, запускаем Synaptic, ставим:
graphviz<br/>
graphviz-doc<br/>
graphviz-dev<br/>
libgraphviz-dev<br/>
libgraph4<br/>
libxdot4<br/>
убунта подскажет и выставит сама зависимости</li>
<li><p>Качаем, либо достаём
<a href="http://networkx.lanl.gov/pygraphviz/download.html">pygraphviz</a>
Распаковываем, и мне пришлось раскомментировать в setup.py
строчки:
``` python</p>

<h1>Linux, generic UNIX</h1>

<p>library_path='/usr/lib/graphviz'
include_path='/usr/include/graphviz'
<code>
Иначе ругается, что переменные не заданы.  
потом
</code> bash
sudo python manage.py setup.py install
```
должно установиться.</p></li>
<li><p>В наш проект джанги добавляем в приложения строчку</p></li>
</ul>


<p><code>python
 INSTALLED_APPS = (
   'django_extensions',   # оно добавляет к нашим командам manage.py  graph_models
 )
</code></p>

<ul>
<li>Теперь самое интересное
``` bash

<h1>Create a dot file</h1>

$ ./manage.py graph_models -a > my_project.dot

<h1>Create a PNG image file called my_project_visualized.png with application grouping</h1>

$ ./manage.py graph_models -a -g -o my_project_visualized.png

<h1>Create a dot file for only the 'foo' and 'bar' applications of your project</h1>

<p>$ ./manage.py graph_models foo bar > my_project.dot
```</p></li>
</ul>


<p>Я использовал команду</p>

<p><code>bash
$ ./manage.py graph_models -a -g -o my_project_visualized.png
</code></p>

<p>Для создания png-шечки, вот что получилось</p>

<p><img class="center" src="/../blog_img/my_project_visualized.png" title="пример того, что получилось" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ссылка на шпаргалки cheat-sheets]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/25/ssylka-na-shparghalki-cheat-sheets/"/>
    <updated>2012-05-25T08:37:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/25/ssylka-na-shparghalki-cheat-sheets</id>
    <content type="html"><![CDATA[<p>Читал хабр, подкинули интересную ссылку на сайт, там собраны краткие подсказки, шпаргалки по разным языкам программирования и не только.<br/>
<strong><a href="http://cheat-sheets.org">cheat-sheets.org</a></strong>
 В общем, очень рекомендую.</p>

<p> Я уже скачал хелп по Django, Python, Regular Expressions.</p>

<p> А там ещё есть:<br/>
 <!-- more --></p>

<p>Donate
.NET
ActionScript
Ada
ADO.NET
Adobe
Adobe Acrobat
AJAX
Algebra
Apache
Apache Ant
Apache Camel
Apache Solr
APT
Arduino
ASCII
Astronomy
ASP
Assembly Language
Atom
AWK
Azure
Bash
Bazaar
BDB
Berkeley DB
BIRT
BlazeDS
Blogger
Blueprint
BPEL
BPM
BPML
Business Process Modeling
C
C#
C++
Calculus
Camera
Catalyst
Characters
Chef
Chemistry
chmod
Clojure
Cloud Computing
Cocoa
ColdFusion
Colour
Computer Science
Continuous Integration
Countries
CSS
CUE
CVS
DB2
db4o
DDD
Debian
Delphi
Design Pattern
Django
Doctrine
Doctypes
DOM
Domain-Driven Design
DOT language
Drupal
DTD
Eclipse
Ed
EJB
Emacs
Emoticon
Encoding
Erlang
F#
Facebook
Fedora
Feed
File
Firebug
Firefox
Firefox Add-ons
FitNesse
Flash
Flash Catalyst
Flex
Fonts
Fortran
Freeware
FTP
GDB
Geometry
Gift
Gimp
Git
GlassFish
Gmail
GoF
Google
Google App Engine
Google Chrome
Google Maps
Grails
Griffon
Groovy
Guitar
GWT
Hadoop
Hardware
Haskell
Hibernate
High Availability
htaccess
HTML
HTTP
Icons
Illustrator
IntelliJ IDEA
Internet Explorer
IRC
IVR
Java
Java EE
Java Persistence API
JavaFX
JavaScript
JavaServer Faces
JBoss
JDBC
jQuery
JSF
JSP
JUnit
Languages
LaTeX
LaTeX-Suite
less
Linux
Lisp
Logic
Lotus Domino
Lua
Lucene
Mac
Mac OS X
Maple
Markdown
Math
Mathematica
MathML
Mathomatic
MATLAB
Maven
Maxima
MFC
Microformats
Microsoft Excel
Microsoft Project
Microsoft Visual Studio
MIME
mod_include
mod_perl
mod_rewrite
MooTools
MSP
Mule
Music
MVVM
MySQL
NetBeans
NMAP
Node.js
Numbers
Objective-C
Open Source Media Framework
OpenCL
OpenCV
OpenMP
OpenSearch
OpenSSH
OpenVZ
Oracle
org-mode
OS X
Perforce
Perl
Photoshop
PHP
PHP Frameworks
Physics
Play Framework
PostgreSQL
Probability Theory
Prototype
Python
Qt
Quicksilver
R
Red Hat
Regular Expressions
Religion
REST
RichFaces
rpm
RSS
Ruby
Ruby on Rails
Sandcastle
Scala
Scalability
Science
Screen
Seam
Sed
Selenium
Sendmail
ServiceMix
Shell Script
Silverlight
Smile
Social Bookmarks
Solaris
Spring Framework
Spring Roo
SQL
SQL Server
SQLite
SSI
SSL
Statistics
SVG
SVN
Sybase
Symfony
Tapestry
Tcl/Tk
TCP
TeX
Thunderbird
TLDs
TLS
Trigonometry
TTCN-3
Twitter
UML
Ubuntu
Unicode
Unix
UTF
Vaadin
VB
VBA
VBScript
Veritas Cluster
Vi
Vim
VIM-LaTeX
Virtualization
Visual Basic
VMware
VoiceXML
vvvv
WebGL
WebMatrix
Wicket
Wikipedia
Windows
Windows Azure
Windows Communication Foundation
Windows Presentation Foundation
Windows PowerShell
WordPress
World of Warcraft
WS-BPEL
XHTML
XML
XML Schema
XPath
XSL
XSLT
XSS
Yahoo
Zen Coding
Friends of Cheat-Sheets.org
Other Collectors
After
The only one you need</p>
]]></content>
  </entry>
  
</feed>
