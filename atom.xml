<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ещё один блог]]></title>
  <link href="http://Anshik.github.com/atom.xml" rel="self"/>
  <link href="http://Anshik.github.com/"/>
  <updated>2012-11-12T13:41:25+04:00</updated>
  <id>http://Anshik.github.com/</id>
  <author>
    <name><![CDATA[Anshik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WebDAV на примере Яндекс.Диск]]></title>
    <link href="http://Anshik.github.com/blog/2012/11/12/webdav-na-primierie-iandieks-dot-disk/"/>
    <updated>2012-11-12T10:52:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/11/12/webdav-na-primierie-iandieks-dot-disk</id>
    <content type="html"><![CDATA[<h3>Первый вариант WebDAV в Linux и FreeBSD</h3>

<p><a href="http://help.yandex.ru/disk/webdav/webdav-linux.xml">Тут</a> описано как подключать диск через Наутилус и Дельфин. Познавательно, но хочется большего.</p>

<h3>Второй вариант davfs2</h3>

<p>Устанавливаем пакет для работы с файловой системой WebDAV</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install davfs2
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>создаём точку монтирования и монтируем</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/YNDXDisk
</span><span class='line'>mount -t davfs https://webdav.yandex.ru ~/YNDXDisk
</span></code></pre></td></tr></table></div></figure>


<p>Вводим имя пользователя и пароль.</p>

<h3>Третий вариант Cadaver</h3>

<p>sudo apt-get install cadaver
cadaver -t http://example.com/webdav/autopub/dir/you/want</p>

<p>Вот пример <a href="http://robertmarkbramprogrammer.blogspot.ru/2010/09/using-webdav-and-cadaver-with-dotcms.html">скрипта</a>, правда не пробовал</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="c"># webDavTransfer.sh</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$1&quot;</span> !<span class="o">=</span> <span class="s2">&quot;-d&quot;</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo </span>Usage <span class="nv">$0</span> -d dest-path files ...
</span><span class='line'>   <span class="nb">echo </span>Transfer files from current directory to dest-path in webDAV.
</span><span class='line'>   <span class="nb">exit </span>2
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">destPath</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nb">shift</span>; <span class="nb">shift</span>
</span><span class='line'>
</span><span class='line'>cadaver -t <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">open http://example.com/webdav/autopub/base-path</span>
</span><span class='line'><span class="s">cd $destPath</span>
</span><span class='line'><span class="s">mput $@</span>
</span><span class='line'><span class="s">quit</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Package Control]]></title>
    <link href="http://Anshik.github.com/blog/2012/10/17/sublime-package-control/"/>
    <updated>2012-10-17T13:06:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/10/17/sublime-package-control</id>
    <content type="html"><![CDATA[<h3>Sublime Package Control</h3>

<p>Package Control это плагин для Sublime, который позвляет управлять и устанавливать новые плагины.</p>

<!-- more -->


<h3>Установка Sublime Package Control</h3>

<p>Для установки нужно зайти на <a href="http://wbond.net/sublime_packages/package_control/installation">сайт</a> и скопировать следующее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span><span class="nn">os</span><span class="p">;</span> <span class="n">pf</span><span class="o">=</span><span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span><span class="o">=</span><span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">;</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">()));</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ipp</span><span class="p">,</span><span class="n">pf</span><span class="p">),</span><span class="s">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://sublime.wbond.net/&#39;</span><span class="o">+</span><span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span><span class="s">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">());</span> <span class="k">print</span> <span class="s">&#39;Please restart Sublime Text to finish installation&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Дальше в Sublime Text 2 открыть консоль python <strong>ctrl+~</strong><br/>
Вставить код туда, нажать Enter и перезапустить Sublime.
Всё, Package Control установлен.</p>

<h3>Использование Package Control</h3>

<p>Нажимаем <strong>Ctrl+Shift+p</strong>, набираем <strong>install</strong>. Программка подсасывает из интернета список плагинов для установки. И медитируем на длинный список плагинов.</p>

<h3>Описание некоторых плагинов</h3>

<h4>Sublime-Aduino</h4>

<p>Подсветка синтаксиса, и ещё чего-то для Ардуино.</p>

<h4>Markdown Preview</h4>

<p>Для тех кому нужно, в браузере показывает md.</p>

<h4>SideBarEnhancements</h4>

<p>Тоже полезная штука, добавляет действий при правом клике в сайдбаре.</p>

<h4><a href="https://github.com/aziz/PlainTasks">PlainTasks</a></h4>

<p>Это шикарная TODO-шница. Файлы с расширением todo, и др.
Строчка заканчивающаяся на &#8220;:&#8221; является проектом<br/>
<strong><code>⌘ + enter</code> or <code>⌘ + i</code></strong>: новая задача<br/>
<strong><code>⌘ + d</code></strong>: завершить/незавершить задачу<br/>
<strong><code>⌘ + shift + a</code></strong> архивировать задачу<br/>
<strong><code>⌘ + r</code></strong> быстро переключаться по проектам<br/>
<code>--</code> и затем <code>tab key</code> сделает это: <code>--- ✄ -----------------------</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QR коды]]></title>
    <link href="http://Anshik.github.com/blog/2012/09/27/qr-kody/"/>
    <updated>2012-09-27T08:33:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/09/27/qr-kody</id>
    <content type="html"><![CDATA[<h3>Что такое QR коды</h3>

<p>Это такие рисунки, которые могут кодировать некоторое сообщение в разных режимах, такие как буквы, буквы+цифры, цифры и др. Чем больше QR код, и чем больше там точек, тем больше информации можно в него поместить.</p>

<!-- more -->


<h3>Для чего используются QR коды</h3>

<p>QR кодами можно закодировать слово, адрес сайта телефон, и др.</p>

<h3>Как сделать свой QR код</h3>

<ol>
<li>Скучно и <a href="http://www.qrcoder.ru/">не красиво</a></li>
<li>С выдумкой и возможностью <a href="http://www.qrcoder.ru/">редактировать</a>, даже бесплатно.</li>
</ol>


<h4>Более вдумчиво и подробно</h4>

<p>Подробно описано на <a href="http://habrahabr.ru/post/127197/">хабре</a>, с примерами на русском (и пример и статья :).
Либо в <a href="http://en.wikipedia.org/wiki/QR_code">википедии</a>, подробно и на английском.</p>

<p><img class="center" src="http://Anshik.github.com/../blog_img/Anshik.github.png" title="Вот, что у меня получилось за несколько минут" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Я купил Arduino, первые впечетления]]></title>
    <link href="http://Anshik.github.com/blog/2012/09/12/ia-kupil-arduino/"/>
    <updated>2012-09-12T09:37:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/09/12/ia-kupil-arduino</id>
    <content type="html"><![CDATA[<h3>Введение</h3>

<p>Казалось бы, ну купил, и купил. Чего тут рассказывать. Искал подешевле, нашел предложения на alliexpress, но решил брать на buyincoins, как-то привычнее и цена в 11-12 долларов за Arduino Nano меня вполне устроила. Само собой я погуглил в яндексе про &#8220;arduino &amp; buyincoins&#8221;. Нашел на форуме сайта arduino.ru негативный отзыв о покупке arduino nano на buyincoins, что мол заказывал 10 шт. пришли все в одном пакете наваленные, доехали помятые и побитые. Да еще и регулятор напряжения горит и взрывается. В общем мне повезло. Пришло целое, не царапаное, не гнутое, в антистатическом пакете и длинным кабелем mini usb, ничего не греется и не горит. Дошло быстро, заказал 26 августа, 9 сентября уже было на почте. <strong>Рекомендую.</strong></p>

<!-- more -->


<h3>Детальное рассмотрение</h3>

<p><img class="center" src="http://Anshik.github.com/../blog_img/arduino_nano_top.jpg" title="arduino nano вид сверху" ></p>

<ul>
<li>В центре стоит микросхема Atmel Mega328P AU, дата шит на <a href="http://www.atmel.com/devices/ATMEGA328P.aspx?tab=documents">ATMEGA328P</a></li>
<li>слева кнопочка, маленькая и туговатая reset</li>
<li>4 светодиода Rx,Tx, Power, L - это пользовательский, которым моргает первое приложение для Ардуино.</li>
</ul>


<p><img class="center" src="http://Anshik.github.com/../blog_img/arduino_nano_bottom.jpg" title="arduino nano вид снизу" ><br/>
Снизу скучно, микросхема FTDI FT232RL usb to rs232, регулятор напряжения, пара резисторных сборок, конденсаторы и диод.</p>

<h3>Первое включение</h3>

<p>В устройствах всегда самое интересное и ответственное первое включение, хоть я и уверен, что в китае каждую ардуинку проверяют. Тем не менее внимательно просмотрел ножки на наличие &#8220;соплей&#8221;, грязи и др. Включил, заработало (заморгало светодиодами).</p>

<h3>Первое программирование Arduino Nano</h3>

<p>Всё очень просто: скачал с <a href="http://arduino.cc/en/Main/Software">офф сайта</a> софтинку, мне нужно было под Ubuntu, в версии 1.0.1 её даже перевели. Подключил платку к компьютеру, запустил программу Arduino.
Выставляем нашу плату: Сервис -> Плата -> Arduino Nano w/Atmega328
Далее Файл -> Примеры -> Basics -> Blink</p>

<p>Загрузится скетч с текстом программы. Далее нажимаем кнопку со стрелочкой вправо, и произойдет загрузка кода в микросхему. И она заморгает светодиодом L раз в секунду.</p>

<figure class='code'><figcaption><span>Привожу код примера</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  Blink</span>
</span><span class='line'><span class="cm">  Turns on an LED on for one second, then off for one second, repeatedly.</span>
</span><span class='line'><span class="cm"> </span>
</span><span class='line'><span class="cm">  This example code is in the public domain.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Pin 13 has an LED connected on most Arduino boards.</span>
</span><span class='line'><span class="c1">// give it a name:</span>
</span><span class='line'><span class="kt">int</span> <span class="n">led</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the setup routine runs once when you press reset:</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// initialize the digital pin as an output.</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the loop routine runs over and over again forever:</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>   <span class="c1">// turn the LED on (HIGH is the voltage level)</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>               <span class="c1">// wait for a second</span>
</span><span class='line'>  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>    <span class="c1">// turn the LED off by making the voltage LOW</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>               <span class="c1">// wait for a second</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1Gb easy_install]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/14/1gb-virtualenv-easy-install/"/>
    <updated>2012-06-14T18:50:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/14/1gb-virtualenv-easy-install</id>
    <content type="html"><![CDATA[<h3>Введение</h3>

<p>Зачем пост, опять же, чтобы не забыть.
Проблема в следующем. На хостинге <a href="http://1gb.ru">1Gb.ru</a> установлены две версии python:
* python 2.7
* python 3.2
по умолчанию используется версия 3.2. <strong>НО</strong> Django работает максимум на версии 2.7, а django-cms с версией Django 1.3, это так к слову.</p>

<blockquote><p>Итак, задача:<br/>
1. сделать python2.7 по умолчанию<br/>
2. настроить easy_install</p></blockquote>

<p>Решение частично <a href="http://www.1gb.ru/wiki/index.php?title=Django_-_%D0%B1%D1%8B%D1%81%D1%82%D1%80%D1%8B%D0%B9_%D1%81%D1%82%D0%B0%D1%80%D1%82">описано</a> на 1gb</p>

<p>Приведу только команды от туда, кому хочется слов почитать, зайдет туда.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$export</span> <span class="nv">PYTHON_VERSION</span><span class="o">=</span><span class="sb">`</span>eselect python list --python2 | awk <span class="s1">&#39;/\*$/ {print $2}&#39;</span><span class="sb">`</span>; <span class="nb">echo</span> <span class="k">${</span><span class="nv">PYTHON_VERSION</span><span class="k">}</span>
</span><span class='line'><span class="nv">$grep</span> -q <span class="s2">&quot;=${PYTHON_VERSION}&quot;</span> ~/.bashrc <span class="o">||</span> sed -i <span class="s2">&quot;/happen/a alias python=${PYTHON_VERSION}\nalias easy_install=easy_install-$(echo ${PYTHON_VERSION} | tr -d python)&quot;</span> ~/.bashrc
</span><span class='line'><span class="nv">$source</span> ~/.bashrc
</span><span class='line'><span class="nv">$echo</span> <span class="s1">&#39;export PATH=${HOME}/python/bin:${HOME}/python/lib64/&#39;</span><span class="k">${</span><span class="nv">PYTHON_VERSION</span><span class="k">}</span><span class="s1">&#39;/site-packages:${PATH}&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nv">$echo</span> <span class="s1">&#39;export PYTHONPATH=${HOME}/python/lib64/&#39;</span><span class="k">${</span><span class="nv">PYTHON_VERSION</span><span class="k">}</span><span class="s1">&#39;/site-packages:${PYTHONPATH}&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nv">$source</span> ~/.bashrc
</span><span class='line'><span class="nv">$ </span>cat &gt; ~/.pydistutils.cfg <span class="s">&lt;&lt;END</span>
</span><span class='line'><span class="s">[install]</span>
</span><span class='line'><span class="s">prefix = \$HOME/python</span>
</span><span class='line'>
</span><span class='line'><span class="s">[easy_install]</span>
</span><span class='line'><span class="s">install_dir = \$HOME/python/lib64/${PYTHON_VERSION}/site-packages</span>
</span><span class='line'><span class="s">END</span>
</span><span class='line'><span class="nv">$mkdir</span> -p ~/src ~/python/lib64/<span class="k">${</span><span class="nv">PYTHON_VERSION</span><span class="k">}</span>/site-packages ~/django
</span><span class='line'><span class="nv">$cd</span> ~/python; ln -s lib64 lib; <span class="nb">cd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Краткое описание, что делает:<br/>
1-я строка версия python получается<br/>
2-я делаются алиасы в .bashrc на python и easy_install (у меня алиас на второе не прописался, я этого не заметил&#8230; решил установкой своего easy_install)<br/>
4,5-я пути прописываются<br/>
7-13 файл настроек easy_install создаётся, смотрите, может ругаться на то что в нём написано <strong>$HOME</strong> вместо полного пути<br/>
14-15 создаются папки и симлинки</p>

<p>Ключ -l выводит пакеты установленный только внутри virtualenv, что при создании окружения с ключем &#8211;no-site-packages теряет всякий смысл.</p>

<p>Далее этот список нужно сохранить:</p>

<p>$ pip freeze -l > pip-requirements</p>

<p>Тепреь в файле pip-requirements лежит список всех необходимых для запуска пакетов. Этот нужно положить в вашу source control и при необходимости обновлять.</p>

<p>Чтобы установить все необходимые пакеты, необходимо выполнить команду:</p>

<p>$ pip install -r pip-requirements</p>

<p>The &#8211;download-cache option should do what you want:
pip install &#8211;download-cache=&#8221;/pth/to/downloaded/files&#8221; package</p>

<p>However, when I tested this, the main package downloaded, saved and installed ok, but the the dependancies were saved with their full url path as the name - a bit annoying, but all the tar.gz files were there.</p>

<p>The &#8211;download option just downloads the main package without it&#8217;s dependancies and doesn&#8217;t install.
pip install &#8211;download=&#8221;/pth/to/downloaded/files&#8221; package</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Подключение по ssh без пароля]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/14/podkliuchieniie-po-ssh-biez-parolia/"/>
    <updated>2012-06-14T08:27:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/14/podkliuchieniie-po-ssh-biez-parolia</id>
    <content type="html"><![CDATA[<p>Этот пост скорее чтобы не забыть самому как это делается, и всегда знать где найти.</p>

<h1>Упрощение подключения</h1>

<p>Идем в папку ~/.ssh, редактируем файл config (если нет - создаём)</p>

<figure class='code'><figcaption><span>Содержимое файла config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Host <span class="nb">test</span>
</span><span class='line'>HostName ftp.test.ru
</span><span class='line'>User username
</span></code></pre></td></tr></table></div></figure>


<p>Это сделано для того, чтобы можно было набрать ssh test, и началось подсоединение, дальше спросит пароль.</p>

<!-- more -->


<h1>Сам SSH</h1>

<ol>
<li>устанавливаем openSSH
<code>sudo apt-get install openssh-server</code></li>
<li>генерируем ключи (если их нет)
<code>ssh-keygen -t rsa</code> спросят место, соглашаться с поумолчанию, спросят пароль, не вводить.</li>
<li>копируем
<code>$ scp ~/.ssh/id_dsa.pub test:~/.ssh/authorized_keys</code>
последний раз вводим пароль.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django-CMS установка и первичная настройка]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/08/django-cms-ustanovka-i-piervichnaia-nastroika/"/>
    <updated>2012-06-08T08:47:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/08/django-cms-ustanovka-i-piervichnaia-nastroika</id>
    <content type="html"><![CDATA[<h3>Что такое Djang-CMS</h3>

<p>Django-CMS &mdash; это система управления контентом, написанная на Python, с использованием фреймворка Django. Она гибкая, настраиваемая, для неё создано много модулей. Помимо этого можно добавлять свои модули.</p>

<h3>Установка</h3>

<ol>
<li>Сделаем новый <a href="http://Anshik.github.com/blog/2012/06/05/ispolzovaniie-virtualenv-python">virtualenv</a></li>
</ol>


<figure class='code'><figcaption><span>Запустите в шеле следующие комманды</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo aptitude install python2.6 python-setuptools python-imaging
</span><span class='line'>sudo easy_install pip
</span><span class='line'>sudo pip install <span class="nv">django</span><span class="o">==</span>1.3.1 django-cms south
</span><span class='line'>django-admin.py startproject mycmsproject
</span><span class='line'><span class="nb">cd </span>mycmsproject
</span><span class='line'>rm settings.py
</span><span class='line'>rm urls.py
</span><span class='line'>wget https://gist.github.com/raw/1125918/settings.py
</span><span class='line'>wget https://gist.github.com/raw/1125918/urls.py
</span><span class='line'>mkdir templates
</span><span class='line'><span class="nb">cd </span>templates
</span><span class='line'>wget https://gist.github.com/raw/1125918/example.html
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>python manage.py syncdb --all
</span><span class='line'>python manage.py migrate --fake
</span><span class='line'>python manage.py runserver
</span></code></pre></td></tr></table></div></figure>


<p>Эти новости хорошие, только подправить navigation.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#from cms.utils.navigation import NavigationNode</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">menus.base</span> <span class="kn">import</span> <span class="n">NavigationNode</span>
</span></code></pre></td></tr></table></div></figure>


<p>hg clone ssh://hg@bitbucket.org/zerok/cmsplugin-news</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Module cuisine, как нахлобучка над Fabric]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/07/module-cuisine/"/>
    <updated>2012-06-07T10:25:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/07/module-cuisine</id>
    <content type="html"><![CDATA[<h3>Что такое Cuisine?</h3>

<p>Cuisine это надстройка, набор сахара, дополнительный уровень абстракции над <a href="http://Anshik.github.com/blog/2012/06/06/fabric-dlia-python">Fabric</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как установить Hypercomments в Octopress]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/06/kak-ustanovit-hypercomments-v-octopress/"/>
    <updated>2012-06-06T16:59:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/06/kak-ustanovit-hypercomments-v-octopress</id>
    <content type="html"><![CDATA[<h3>Введение</h3>

<p>В Octopress по умолчанию предлагается использовать комментарии Disqus, а захотелось попробовать более гиковские Hypercomments. Решил разобраться с вопросом.</p>

<!-- more -->


<h3>Регистрация</h3>

<p>Регистрируемся на <a href="http://hypercomments.com/">сайте</a>
Получаем код виджета для вставления в свой сайт.</p>

<figure class='code'><figcaption><span>У меня он выглядит так</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;hypercomments_widget&quot;</span><span class="nt">&gt;&lt;/div&gt;&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_hcp</span> <span class="o">=</span> <span class="nx">_hcp</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">_hcp</span><span class="p">.</span><span class="nx">widget_id</span> <span class="o">=</span> <span class="mi">1551</span><span class="p">;</span>
</span><span class='line'><span class="nx">_hcp</span><span class="p">.</span><span class="nx">widget</span> <span class="o">=</span> <span class="s2">&quot;Stream&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">hcc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;script&quot;</span><span class="p">);</span> <span class="nx">hcc</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">;</span> <span class="nx">hcc</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="nx">hcc</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;https:&quot;</span> <span class="o">==</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">?</span> <span class="s2">&quot;https&quot;</span> <span class="o">:</span> <span class="s2">&quot;http&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;://widget.hypercomments.com/apps/js/hc.js&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;script&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="nx">s</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">hcc</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">);</span>
</span><span class='line'><span class="p">})();</span><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Встраивание</h3>

<p>Я встраивал немного костылём, зато быстро.
Создаём файл <code>source/_insludes/hypercomments.html</code></p>

<p><img class="center" src="http://Anshik.github.com/../blog_img/hypercomments.png" title="Вот как должен выглядеть файл" ></p>

<p>Я оставил проверку наличия комментов Дискурса.
Дальше меняем файлы <code>source/_layouts/page.html, source/_layouts/page.html</code> в обоих файлах одинаковый кусочек кода</p>

<figure class='code'><figcaption><span>Было, стало</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="c">&lt;!-- Было --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Comments<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;disqus_thread&quot;</span> <span class="na">aria-live=</span><span class="s">&quot;polite&quot;</span><span class="nt">&gt;</span><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Стало --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;hypercomments_widget&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Затем редактируем файл <code>_includes/after_footer.html</code>
<img class="center" src="http://Anshik.github.com/../blog_img/hypercomments_after_footer.png" title="Вот как должен выглядеть файл after_footer.html" ></p>

<h3>Всё! Should work&#8230; :)</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabric для python, первые шаги]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/06/fabric-dlia-python/"/>
    <updated>2012-06-06T16:54:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/06/fabric-dlia-python</id>
    <content type="html"><![CDATA[<h3>Что такое Fabric?</h3>

<p>Вольный перевод <a href="http://docs.fabfile.org/en/1.4.2/index.html">документации</a><br/>
Fabric &mdash; это библиотечка для python версии >= 2.5 и консольная утилитка для облегчения использования SSH при деплое проекта, или выполнения админских задач.</p>

<p>Она предоставляет простой набор операций для выполнения локальных или удалённых команд, загрузки, скачивания файлов и др.</p>

<!-- more -->


<h3>Установка</h3>

<p>Я устанавливаю в свой питоний инстанс, созданный как написано <a href="http://Anshik.github.com/blog/2012/06/05/ispolzovaniie-virtualenv-python">тут</a><br/>
<code>$ ./bin/easy_install fabric</code></p>

<p>Он подтягивает ещё <code>ssh 1.7.14</code> и <code>pycrypto 2.6</code>.</p>

<h3>Простейшее использование</h3>

<p>Обычно создают модуль на Python, содержащий одну или более функций, затем исполняют его при помощи <strong>fab</strong>. Рассмотрим простейший пример. Для запуска выполняем из папки с этим скриптом <code>fab hello</code>.</p>

<figure class='code'><figcaption><span>fabric.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!./bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">run</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;It&#39;s says: hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>При его запуске мне выдаёт предупреждение</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/lib/python2.6/dist-packages/pycrypto-2.6-py2.6-linux-x86_64.egg/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp &gt;<span class="o">=</span> 5 to avoid timing attack vulnerability.
</span><span class='line'>  _warn<span class="o">(</span><span class="s2">&quot;Not using mpz_powm_sec.  You should rebuild using libgmp &gt;= 5 to avoid timing attack vulnerability.&quot;</span>, PowmInsecureWarning<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>И затем непосредственно вывод fabric</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>It<span class="err">&#39;</span>s says: hello
</span><span class='line'>
</span><span class='line'>Done.
</span></code></pre></td></tr></table></div></figure>


<p>Предупреждание выдает даже не Фабрик, а pycrypto, ну и ладно, не буду ничего обновлять</p>

<h3>Передача аргументов</h3>

<p>Передача аргументов происходит следующим образом:<br/>
<code>&lt;task name&gt;:&lt;arg&gt;,&lt;kwarg&gt;=&lt;value&gt;,....</code></p>

<figure class='code'><figcaption><span>Передача аргументов</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">run</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">name_in</span><span class="o">=</span><span class="s">&#39;name&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;It&#39;s says: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">name_in</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вызов с аргументами можно производить двумя способами:
<code>fab hello:name_in=Anshik</code><br/>
<code>fab hello:Anshik</code><br/>
Первый вариант словарем, второй &mdash; аргументами.</p>

<h3>Продолжение мысли cuisine</h3>

<p>cuisine &mdash; переводится как кухня<br/>
Оно добавляет ещё уровень абстракции для упрощения</p>

<p><a href="https://github.com/sebastien/cuisine">cuisine</a></p>

<p><a href="http://Anshik.github.com/blog/2012/06/07/module-cuisine">более подробно в блоге</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Использование virtualenv python]]></title>
    <link href="http://Anshik.github.com/blog/2012/06/05/ispolzovaniie-virtualenv-python/"/>
    <updated>2012-06-05T14:05:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/06/05/ispolzovaniie-virtualenv-python</id>
    <content type="html"><![CDATA[<h3>Введение</h3>

<p>Давно хотел разобраться, как настраивать и использовать <a href="http://pypi.python.org/pypi/virtualenv">virtualenv</a>.
Virtualenv это средство для создания изолированного окружения Python.</p>

<h4>Зачем оно нужно?</h4>

<p>По умолчанию easy_install ставит питоновские пакеты примерно в <code>/usr/local/lib/python2.6/dist-packages</code>
И там получается помойка из пакетов, в некоторых случаях мы работаем со старыми версиями пакетов.</p>

<!-- more -->


<blockquote><p>К примеру был написан сайт на Django, года два назад, и нужно использовать старую джангу, чтобы всё не переписывать. Тут два варианта :)<br/>
* Для слабаков:<br/>
Просто скопировать старую джангу в проект и не париться, и скопировать туда же в проект старые модули, и всё будет работать :)</p>

<ul>
<li>Для не_слабаков:<br/>
Настроить virtualenv под проект.</li>
</ul>


<p><strong>Virtualenv</strong> &mdash; позволяет для каждого проекта создать <strong>своё окружение</strong> <em>питонячьих</em> пакетов.</p></blockquote>

<h3>Установка</h3>

<p>sudo easy_install virtualenv</p>

<figure class='code'><figcaption><span>Как-то так оно установливается</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo easy_install virtualenv
</span><span class='line'>install_dir /usr/local/lib/python2.6/dist-packages/
</span><span class='line'>Searching <span class="k">for </span>virtualenv
</span><span class='line'>Reading http://pypi.python.org/simple/virtualenv/
</span><span class='line'>Reading http://www.virtualenv.org
</span><span class='line'>Reading http://virtualenv.openplans.org
</span><span class='line'>Best match: virtualenv 1.7.1.2
</span><span class='line'>Downloading http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.7.1.2.tar.gz#md5<span class="o">=</span>3be8a014c27340f48b56465f9109d9fa
</span><span class='line'>Processing virtualenv-1.7.1.2.tar.gz
</span><span class='line'>Running virtualenv-1.7.1.2/setup.py -q bdist_egg --dist-dir /tmp/easy_install-yLN55d/virtualenv-1.7.1.2/egg-dist-tmp-a8EZxb
</span><span class='line'>warning: no previously-included files matching <span class="s1">&#39;*.*&#39;</span> found under directory <span class="s1">&#39;docs/_templates&#39;</span>
</span><span class='line'>Adding virtualenv 1.7.1.2 to easy-install.pth file
</span><span class='line'>Installing virtualenv script to /usr/local/bin
</span><span class='line'>
</span><span class='line'>Installed /usr/local/lib/python2.6/dist-packages/virtualenv-1.7.1.2-py2.6.egg
</span><span class='line'>Processing dependencies <span class="k">for </span>virtualenv
</span><span class='line'>Finished processing dependencies <span class="k">for </span>virtualenv
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Проверяем </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>whereis virtualenv
</span><span class='line'>virtualenv: /usr/local/bin/virtualenv
</span></code></pre></td></tr></table></div></figure>


<h3>Создание окружения</h3>

<figure class='code'><figcaption><span>Создание окружения</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>home:~/temp<span class="nv">$ </span>virtualenv  -p /usr/bin/python2.6 --no-site-packages custom_python
</span><span class='line'>Running virtualenv with interpreter /usr/bin/python2.6
</span><span class='line'>The --no-site-packages flag is deprecated; it is now the default behavior.
</span><span class='line'>New python executable in custom_python/bin/python2.6
</span><span class='line'>Also creating executable in custom_python/bin/python
</span><span class='line'>Installing setuptools............done.
</span><span class='line'>Installing pip...............done.
</span><span class='line'>home:~/temp<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Мы сказали, что хотим чтобы в папке <strong>custom_python</strong> использовался python интерпретатор, лежащий в <code>/usr/bin/python2.6</code>, и сказали, что не нужно использовать системных <strong>site-packages</strong>. А нам подсказали, что теперь писать &#8211;no-site-packages не нужно.</p>

<figure class='code'><figcaption><span>Смотрим, что получилось в папке custom_python.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>home:~/temp/custom_python<span class="nv">$ </span>ls
</span><span class='line'>bin  include  lib
</span><span class='line'>home:~/temp/custom_python<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Для запуска приложения в нашей среде нужно сказать <code>./bin/python</code></p>

<h3>Пример установки Django</h3>

<p>Мне как раз захотелось запустить Django1.4, потом django-cms и т.д.<br/>
<code>home:~/temp/custom_python$ ./bin/easy_install django</code></p>

<p>Django скачивается, устанавливается и теперь лежит в:<br/>
<code>home:~/temp/custom_python/lib/python2.6/site-packages/Django-1.4-py2.6.egg</code></p>

<figure class='code'><figcaption><span>Создание и запуск проекта Django</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>home:~/temp/custom_python<span class="nv">$ </span>./bin/django-admin.py startproject custom_django
</span><span class='line'>home:~/temp/custom_python<span class="nv">$ </span><span class="nb">cd </span>custom_django/
</span><span class='line'>home:~/temp/custom_python/custom_django<span class="nv">$ </span>ls
</span><span class='line'>custom_django  manage.py
</span><span class='line'>home:~/temp/custom_python/custom_django<span class="nv">$ </span>../bin/python manage.py runserver
</span><span class='line'>Validating models...
</span><span class='line'>
</span><span class='line'>0 errors found
</span><span class='line'>Django version 1.4, using settings <span class="s1">&#39;custom_django.settings&#39;</span>
</span><span class='line'>Development server is running at http://127.0.0.1:8000/
</span><span class='line'>Quit the server with CONTROL-C.
</span></code></pre></td></tr></table></div></figure>


<p>В общем-то, можно сказать всё. И не так страшно, как казалось.</p>

<h4>Запуск скрипта</h4>

<p>Создаём файл, обратите внимание на строчку <code>#!./bin/python</code> вначале файла, говорим, что будем при запуске использовать наш интерпретатор.</p>

<figure class='code'><figcaption><span>К примеру такой tst.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!./bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">RAND_NUMS</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">rand_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">RAND_NUMS</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="p">()</span>
</span><span class='line'>    <span class="n">rand_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">((</span><span class="n">a</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">%</span><span class="mi">255</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">rand_list</span>
</span><span class='line'><span class="k">print</span> <span class="n">sys</span><span class="o">.</span><span class="n">executable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Говорим <code>chmod +x tst.py</code>, запускаем <code>./tst.py</code></p>

<figure class='code'><figcaption><span>Результат</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>home:~/temp/custom_python<span class="nv">$ </span>./tst.py
</span><span class='line'><span class="o">[</span><span class="s1">&#39;W&#39;</span>, <span class="s1">&#39;\x1f&#39;</span>, <span class="s1">&#39;\x06&#39;</span>, <span class="s1">&#39;\x0f&#39;</span>, <span class="s1">&#39;\x03&#39;</span>, <span class="s1">&#39;b&#39;</span>, <span class="s1">&#39;T&#39;</span>, <span class="s1">&#39;G&#39;</span>, <span class="s1">&#39;\x17&#39;</span>, <span class="s1">&#39;\x04&#39;</span><span class="o">]</span>
</span><span class='line'>/home/apalkov/temp/custom_python/bin/python
</span><span class='line'>
</span><span class='line'>home:~/temp/custom_python<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>В общем-то всё.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Добавление кастомных страниц]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/dobavlieniie-kastomnykh-stranits/"/>
    <updated>2012-05-29T17:04:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/dobavlieniie-kastomnykh-stranits</id>
    <content type="html"><![CDATA[<p>Блог, архив блога - это хорошо. Но давно интересовал вопрос:</p>

<blockquote><p>Как добавить свою страницу в меню навигации.</p></blockquote>

<p>Нашёл ответ, всё оказалось как всегда просто.</p>

<!-- more -->


<h3>Создаём новую страницу &#8220;О себе&#8221;</h3>

<p><code>rake new_page["about"]</code></p>

<h3>Добавляем её в меню навигации</h3>

<p>Редактируем файл <code>source/custom/navigation.html</code></p>

<figure class='code'><figcaption><span>добавляем урл своей страницы 4 строка</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>Обо мне<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Редактируем содержимое страницы &#8220;О себе&#8221;</h3>

<p><code>vim source/about/index.markdown</code></p>

<p>Всё!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Отладка почтовых сообщений в django]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/otladka-pochtovykh-soobshchienii-v-django/"/>
    <updated>2012-05-29T15:42:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/otladka-pochtovykh-soobshchienii-v-django</id>
    <content type="html"><![CDATA[<p>python -m smtpd -n -c DebuggingServer localhost:25
Эта одностроковая команда запускает сервер SMTP на порту 1025. Здесь используется стандартная библиотека smtpd для языка Python (задается при помощи -m smtpd) и передаются три аргумента: -n, -c DebuggingServer и localhost:1025.</p>

<!-- more -->


<p>Аргумент -n указывает Python-у не устанавливать для setuid (позволяет изменять пользователя) значение &#8220;nobody&#8221; — код будет работать под вашим пользователем.
Аргумент -c DebuggingServer указывает Python-у использовать класс DebuggingServer в качестве реализации SMTP, которая печатает каждое получаемое сообщение в выходной поток stdout.
Аргумент localhost:1025 указывает Python-у запускать SMTP сервер как locahost на порту1025.
 Однако, если вы захотите запустить сервер на стандартном порту 25, вам нужно будет использовать команду sudo, поскольку только пользователь с правами root может запускать сервисы на портах 1 — 1024. Они также известны как привилегированные порты.</p>

<p>Есть ещё какие-то приложения, которые запускаешь, шлёшь туда отладочную почту.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Нарезка mp3 файлов Linux Ubuntu]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/nariezka-mp3-failov-linux-ubuntu/"/>
    <updated>2012-05-29T15:26:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/nariezka-mp3-failov-linux-ubuntu</id>
    <content type="html"><![CDATA[<p>У меня есть плеер <a href="http://www.cowonrussia.ru/?action=products&amp;mode=search&amp;category_id=6&amp;product_id=27">Cowon E2</a>, флеша в нём 2 Гига.<br/>
<strong>Плюсы:</strong></p>

<ul>
<li>удобный</li>
<li>не прихотливый</li>
<li>заряжается от usb</li>
<li>переходник usb втыкается в аудио jack</li>
<li>навигация по папкам</li>
</ul>


<!-- more -->


<p><strong>Минусы</strong>:</p>

<ul>
<li>кнопка включения можеть быть нажата случайно</li>
<li>он симметричен, на ощупь не определишь где power, где переключение режимов</li>
</ul>


<p>Иногда нажатие не на ту кнопку может привести к переключению на следующий трек, а если ты слушаешь книгу или подкаст длинной в 2 часа, то перемотка не вариант, поэтому я использую нарезку фалов mp3.</p>

<p>Я пользовался в Windows <strong>mp3cut</strong>, а перейдя на Ubuntu пришлось искать альтернативу.</p>

<p>При использовании mp3cut написал для себя скриптик, который открывает файл, и нарезает его.</p>

<p>В ubuntu всё проще <strong>mp3splt</strong></p>

<p><code>mp3splt -t 5.0 -o @n_@f -d ump_270 ump_podcast270.mp3</code></p>

<p><strong>Комментарий:</strong><br/>
 <code>-t</code> продолжительность кусочка<br/>
 <code>-o</code> название выходного файла, в данном случае @счётчик_@название файла<br/>
 <code>-d</code> название выходной директории</p>

<p>и файл входной.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как правильно делать треды в PyQT4]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/threads-in-pyqt4/"/>
    <updated>2012-05-29T15:24:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/threads-in-pyqt4</id>
    <content type="html"><![CDATA[<p><a href="http://www.linux.org.ru/forum/development/1529306">Тут</a> нашёл решение</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Вот примерно так оно делается.</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtCore</span> <span class="kn">import</span> <span class="n">QEvent</span><span class="p">,</span> <span class="n">QThread</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtGui</span> <span class="kn">import</span> <span class="n">QApplication</span><span class="p">,</span> <span class="n">QTextEdit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyEvent</span><span class="p">(</span><span class="n">QEvent</span><span class="p">):</span>
</span><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'><span class="n">QEvent</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">QEvent</span><span class="o">.</span><span class="n">User</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Timer</span><span class="p">(</span><span class="n">QThread</span><span class="p">):</span>
</span><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event_receiver</span><span class="p">):</span>
</span><span class='line'><span class="n">QThread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">event_receiver</span> <span class="o">=</span> <span class="n">event_receiver</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">time</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">QApplication</span><span class="o">.</span><span class="n">postEvent</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">event_receiver</span><span class="p">,</span> <span class="n">MyEvent</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">))</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Display</span><span class="p">(</span><span class="n">QTextEdit</span><span class="p">):</span>
</span><span class='line'><span class="k">def</span> <span class="nf">customEvent</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'><span class="k">if</span> <span class="nb">isinstance</span> <span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">MyEvent</span><span class="p">):</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;time = </span><span class="si">%i</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">event</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="n">display</span> <span class="o">=</span> <span class="n">Display</span><span class="p">()</span>
</span><span class='line'><span class="n">display</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">timer</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="n">display</span><span class="p">)</span>
</span><span class='line'><span class="n">timer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipython for python3.2 WindowsXP]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/ipython-for-python3-dot-2-windowsxp/"/>
    <updated>2012-05-29T15:19:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/ipython-for-python3-dot-2-windowsxp</id>
    <content type="html"><![CDATA[<p>Вот, задался целью всё-таки забороть ipython для Python 3.2, и получилось :)</p>

<h3>Делал примерно так:</h3>

<p>1.1. Поставил Python3.2: python-3.2.1.msi<br/>
1.2. Пропишите пути к новому питону</p>

<ol>
<li>distribute_setup.py : http://python-distribute.org/distribute_setup.py<br/>
это для того чтобы заработал easy_install</li>
</ol>


<!-- more -->


<ol>
<li><p>Дальше<br/>
<code>easy_install http://archive.ipython.org/release/0.11/py3/ipython-0.11-py3.2.egg</code><br/>
ставится ipython к папке <code>c:/python32/Scripts</code> тоже хорошо бы переменную <strong>path</strong> виндовса поправить</p></li>
<li><p>Запускаем <code>ipython3.exe</code> в папке Scripts и ловим эксепшн, у меня во всяком случае было так:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> c:<span class="se">\P</span>ython32<span class="se">\S</span>cripts&gt;ipython3.exe
</span><span class='line'> Error in sys.excepthook:
</span><span class='line'> TypeError: _isdir<span class="o">()</span> takes exactly 1 argument <span class="o">(</span>0 given<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> Original exception was:
</span><span class='line'> Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'> File <span class="s2">&quot;c:\Python32\Scripts\ipython3-script.py&quot;</span>, line 9, in
</span><span class='line'> load_entry_point<span class="o">(</span><span class="s1">&#39;ipython==0.11&#39;</span>, <span class="s1">&#39;console_scripts&#39;</span>, <span class="s1">&#39;ipython3&#39;</span><span class="o">)()</span>
</span><span class='line'> File <span class="s2">&quot;c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\frontend\te</span>
</span><span class='line'><span class="s2">rminal\ipapp.py&quot;</span>, line 369, in launch_new_instance
</span><span class='line'> app.initialize<span class="o">()</span>
</span><span class='line'> File <span class="s2">&quot;c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\frontend\te</span>
</span><span class='line'><span class="s2">rminal\ipapp.py&quot;</span>, line 283, in initialize
</span><span class='line'> self.init_shell<span class="o">()</span>
</span><span class='line'> File <span class="s2">&quot;c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\frontend\te</span>
</span><span class='line'><span class="s2">rminal\ipapp.py&quot;</span>, line 303, in init_shell
</span><span class='line'> <span class="nv">ipython_dir</span><span class="o">=</span>self.ipython_dir<span class="o">)</span>
</span><span class='line'> File <span class="s2">&quot;c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\config\conf</span>
</span><span class='line'><span class="s2">igurable.py&quot;</span>, line 295, in instance
</span><span class='line'> <span class="nv">inst</span> <span class="o">=</span> cls<span class="o">(</span>*args, **kwargs<span class="o">)</span>
</span><span class='line'> File <span class="s2">&quot;c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\frontend\te</span>
</span><span class='line'><span class="s2">rminal\interactiveshell.py&quot;</span>, line 112, in __init__
</span><span class='line'> <span class="nv">user_global_ns</span><span class="o">=</span>user_global_ns, <span class="nv">custom_exceptions</span><span class="o">=</span>custom_exceptions
</span><span class='line'> File <span class="s2">&quot;c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\core\intera</span>
</span><span class='line'><span class="s2">ctiveshell.py&quot;</span>, line 384, in __init__
</span><span class='line'> self.db <span class="o">=</span> PickleShareDB<span class="o">(</span>os.path.join<span class="o">(</span>self.profile_dir.location, <span class="s1">&#39;db&#39;</span><span class="o">))</span>
</span><span class='line'> File <span class="s2">&quot;c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\utils\pickl</span>
</span><span class='line'><span class="s2">eshare.py&quot;</span>, line 52, in __init__
</span><span class='line'> <span class="k">if </span>not self.root.isdir<span class="o">()</span>:
</span><span class='line'>TypeError: _isdir<span class="o">()</span> takes exactly 1 argument <span class="o">(</span>0 given<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>c:<span class="se">\P</span>ython32<span class="se">\S</span>cripts&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Решил я это так
В файле <code>"c:\Python32\lib\site-packages\ipython-0.11-py3.2.egg\IPython\utils\pickleshare.py"</code><br/>
В 52 строке закомментировал<br/>
<code>#if not self.root.isdir():</code><br/>
И 53-ей строкой написал следующее<br/>
<code>if not os.path.isdir(self.root):</code></p>

<p>Заработало, что не может не радовать.
Единственное pyreadline ещё похоже нужно замучить</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интерпретатор для Питонофилов]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/intierprietator-dlia-pitonofilov/"/>
    <updated>2012-05-29T15:15:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/intierprietator-dlia-pitonofilov</id>
    <content type="html"><![CDATA[<p>Раньше я использовал <strong>iPython</strong>, но хозяйки посоветовали мне <strong>DreamPie</strong>
Установил под WindowsXP, при первом запуске пришлось фиксить выдало, что не может:</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>File <span class="s2">&quot;C:\Program Files\DreamPie\share\dreampie\subp_main.py&quot;</span>, line 30, in &lt;module&gt;
</span><span class='line'> sys.setdefaultencoding<span class="o">(</span><span class="s1">&#39;utf-8&#39;</span><span class="o">)</span>
</span><span class='line'>AttributeError: <span class="s1">&#39;module&#39;</span> object has no attribute <span class="s1">&#39;setdefaultencoding&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Фиксим в файле &#8220;c:\Program Files\DreamPie\share\dreampie\subp_main.py&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="kn">import</span> <span class="nn">platform</span>
</span><span class='line'> <span class="k">if</span> <span class="ow">not</span> <span class="s">&quot;3.2&quot;</span> <span class="ow">in</span> <span class="n">platform</span><span class="o">.</span><span class="n">python_version</span><span class="p">():</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Альтернативные решения <a href="https://bugs.launchpad.net/dreampie/+bug/716377">данной</a> баги</p>

<blockquote><p><strong>PS:</strong> признаться продолжаю пользоваться Ipython, привык, ничего не могу с собой поделать. Может нужно ещё раз посмотреть по-внимательнее</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Меняем время на убунте на правилное]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/mieniaiem-vriemia-na-ubuntie-na-pravilnoie/"/>
    <updated>2012-05-29T15:12:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/mieniaiem-vriemia-na-ubuntie-na-pravilnoie</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Вот как исправить переход с летнего на зимнее время в Ubuntu 10.10</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Disallow winter time for Moscow </span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Disable winter time for MoscoW&quot;</span>
</span><span class='line'>
</span><span class='line'>sleep 3
</span><span class='line'>
</span><span class='line'>mkdir ./temp1
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> ./temp1
</span><span class='line'>
</span><span class='line'><span class="c">#wget ftp://elsie.nci.nih.gov/pub/tzdata2011k.tar.gz  уже не работает</span>
</span><span class='line'> wget http://people.freebsd.org/~edwin/tzdata2011k.tar.gz
</span><span class='line'>
</span><span class='line'>tar xzf tzdata2011k.tar.gz
</span><span class='line'>
</span><span class='line'>cp /etc/localtime /tmp/localtime.old
</span><span class='line'>
</span><span class='line'>zic europe
</span><span class='line'>
</span><span class='line'>ln -sf /usr/share/zoneinfo/Europe/Moscow /etc/localtime
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>rm -rf ./temp1
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django-cms filer plugin]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/django-cms-filer-plugin/"/>
    <updated>2012-05-29T15:09:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/django-cms-filer-plugin</id>
    <content type="html"><![CDATA[<p>Если вы решили использовать это django-cms filer plugin, то не забудьте сначала поставить filer, потом easy_thumbnails</p>

<p>А если вы используете yandex maps plugin, то почему-то пришлось делать правильный шаблон, и в контекст передавать нормально свой ключ, а то не работает. Потом нужно подробно, это просто чтобы не забыть.</p>

<p>Чтобы не забыть ещё в новостях нужно сделать так, в файле cms_plugin/navigation.py</p>

<h1>from cms.utils.navigation import NavigationNode</h1>

<p>from menus.base import NavigationNode</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Добавление robots.txt и favicon.ico в Django 1.3]]></title>
    <link href="http://Anshik.github.com/blog/2012/05/29/dobavlieniie-robots-dot-txt-i-favicon-dot-ico-v-django-1-dot-3/"/>
    <updated>2012-05-29T14:59:00+04:00</updated>
    <id>http://Anshik.github.com/blog/2012/05/29/dobavlieniie-robots-dot-txt-i-favicon-dot-ico-v-django-1-dot-3</id>
    <content type="html"><![CDATA[<p>Добавляем следующее в urls.py и радуемся.
Файл robots.txt кладём в папку с шаблонами страниц, примерное содержание robots.txt</p>

<!-- more -->


<figure class='code'><figcaption><span>примерное содержание robots.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># robots.txt http://www.???.ru/</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'>User-agent: *
</span><span class='line'>Disallow: /admin
</span><span class='line'>
</span><span class='line'>User-agent: Yandex
</span><span class='line'>Disallow: /admin
</span><span class='line'>Host: www.???.ru
</span><span class='line'>Crawl-delay: 10
</span><span class='line'>
</span><span class='line'>Sitemap: http://www.???.ru/sitemap.xml
</span></code></pre></td></tr></table></div></figure>


<p>Иконку <strong>favicon.ico</strong> кладём в папку со статическими файлами сайта.</p>

<figure class='code'><figcaption><span>Добавляем следующее в urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="kn">from</span> <span class="nn">django.conf.urls.defaults</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'> <span class="kn">from</span> <span class="nn">django.views.generic.base</span> <span class="kn">import</span> <span class="n">TemplateView</span><span class="p">,</span> <span class="n">RedirectView</span>
</span><span class='line'>
</span><span class='line'> <span class="k">class</span> <span class="nc">TextPlainView</span><span class="p">(</span><span class="n">TemplateView</span><span class="p">):</span>
</span><span class='line'> <span class="k">def</span> <span class="nf">render_to_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'> <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TextPlainView</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">render_to_response</span><span class="p">(</span>
</span><span class='line'> <span class="n">context</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'> <span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^robots\.txt$&#39;</span><span class="p">,</span> <span class="n">TextPlainView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="n">template_name</span><span class="o">=</span><span class="s">&#39;robots.txt&#39;</span><span class="p">)),</span>
</span><span class='line'> <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^favicon\.ico$&#39;</span><span class="p">,</span> <span class="n">RedirectView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="s">&#39;/media/img/favicon.ico&#39;</span><span class="p">)),</span>
</span><span class='line'> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Зачем нужен robots.txt?</h3>

<p>Для того чтобы поисковому боту сказать, куда заглядывать не нужно, наверняка ещё для чего-то, гуглить лень, можете добавить комменты зачем, перенесу в пост.</p>

<h3>Зачем нужен favicon.ico, он же favicon.png?</h3>

<p>Это иконка которая будет показываться в левом углу вкладки в браузере, и будет отображаться при добавлении в избранное, она в общем так и расшифровывается favicon (favorite  icon), типа любимая иконка. Нарисовать эту иконку можно в любом графическом редакторе например <a href="http://gimp.org">Gimp</a>. Картинка должна быть размером 16x16 пикселей.</p>

<blockquote><p><strong>PS:</strong> Не забываем, что это не полный urls.py, а только те строчки, которые добавляют robots.txt и favicon.ico.</p></blockquote>

<p> Я в первый раз попробовал это на сайте <a href="dok4you.ru">Женской консультации 2х2</a>  про акушерство, гинекологию и др.</p>

<blockquote><p><strong>PPS:</strong> Возможно нужно ещё сказать джанге на хостинге
 <code>python manage.py collectstatic</code>, как-то так, может с ошибкой</p></blockquote>
]]></content>
  </entry>
  
</feed>
